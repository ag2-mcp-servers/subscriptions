# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:33:17+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    APIKeyQuery,
    BaseSecurity,
    UnsuportedSecurityStub,
)
from fastapi import Path

from models import (
    Error,
    PublicSubscriptionStatus,
    PublicSubscriptionStatusesResponse,
    PublicUpdateSubscriptionStatusRequest,
    SubscriptionDefinitionsResponse,
)

app = MCPProxy(
    description='Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.',
    title='Subscriptions',
    version='v3',
    servers=[{'url': 'https://api.hubapi.com/'}],
)


@app.get(
    '/communication-preferences/v3/definitions',
    description=""" Get a list of all subscription definitions for the portal """,
    tags=['communication_preferences_management'],
    security=[
        APIKeyQuery(name="hapikey"),
        APIKeyHeader(name="private-app-legacy"),
        UnsuportedSecurityStub(name="None"),
        APIKeyHeader(name="private-app-legacy"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__communication_preferences_v3_definitions_get_page():
    """
    Get subscription definitions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/communication-preferences/v3/status/email/{emailAddress}',
    description=""" Returns a list of subscriptions and their status for a given contact. """,
    tags=['communication_preferences_management'],
    security=[
        APIKeyQuery(name="hapikey"),
        APIKeyHeader(name="private-app-legacy"),
        UnsuportedSecurityStub(name="None"),
        APIKeyHeader(name="private-app-legacy"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_subscription_status_for_contact(
    email_address: str = Path(..., alias='emailAddress')
):
    """
    Get subscription statuses for a contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/communication-preferences/v3/subscribe',
    description=""" Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error. """,
    tags=['communication_preferences_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        APIKeyQuery(name="hapikey"),
        UnsuportedSecurityStub(name="None"),
        APIKeyHeader(name="private-app-legacy"),
        APIKeyHeader(name="private-app-legacy"),
    ],
)
def post__communication_preferences_v3_subscribe_subscribe(
    body: PublicUpdateSubscriptionStatusRequest,
):
    """
    Subscribe a contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/communication-preferences/v3/unsubscribe',
    description=""" Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error. """,
    tags=['communication_preferences_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        APIKeyQuery(name="hapikey"),
        UnsuportedSecurityStub(name="None"),
        APIKeyHeader(name="private-app-legacy"),
        APIKeyHeader(name="private-app-legacy"),
    ],
)
def post__communication_preferences_v3_unsubscribe_unsubscribe(
    body: PublicUpdateSubscriptionStatusRequest,
):
    """
    Unsubscribe a contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
